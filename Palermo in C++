#include <iostream>
#include <windows.h>
#include <map>
#include <string>
#include <random>
#include <ctime>
#include <algorithm> // Απαραίτητο για std::shuffle
\

class MafiaGame {
public:
    MafiaGame();
    void startGame();
    void nextPhase();

private:
    enum Phase { NIGHT, DAY };
    Phase currentPhase;
    
    struct Player {
        std::string name;
        std::string role;
        bool alive = true;
    };
    
    std::vector<Player> players;
    std::map<std::string, int> roleCount;
    
    void setupGame();
    void assignRoles();
    void handleNightPhase();
    void handleDayPhase();
    void voteElimination();
    int getRandomAlivePlayer();
};

MafiaGame::MafiaGame() {
    std::cout << "Καλώς ήρθατε στο Mafia Game!\n";
}

void MafiaGame::startGame() {
    setupGame();
    assignRoles();
    std::cout << "Το παιχνίδι ξεκινά! Φάση: Νύχτα\n";
    currentPhase = NIGHT;
}

void MafiaGame::setupGame() {
    players.clear();
    roleCount = { {"Δολοφόνος", 1}, {"Αστυνομικός", 1}, {"Πολίτης", 3} };
    
    for (int i = 1; i <= 5; ++i) {
        players.push_back({"Παίκτης " + std::to_string(i), "", true});
    }
}

void MafiaGame::assignRoles() {
    std::vector<std::string> availableRoles;
    for (const auto &pair : roleCount) {
        for (int i = 0; i < pair.second; ++i) {
            availableRoles.push_back(pair.first);
        }
    }
    
    std::shuffle(availableRoles.begin(), availableRoles.end(), std::default_random_engine(time(nullptr)));
 
    for (size_t i = 0; i < players.size(); ++i) {
        players[i].role = availableRoles[i];
    }
}

void MafiaGame::nextPhase() {
    if (currentPhase == NIGHT) {
        handleNightPhase();
    } else {
        handleDayPhase();
    }
}

void MafiaGame::handleNightPhase() {
    int victimIndex = getRandomAlivePlayer();
    players[victimIndex].alive = false;
    std::cout << "Νύχτα: Ο δολοφόνος επιτέθηκε σε " << players[victimIndex].name << "!\n";
    currentPhase = DAY;
}

void MafiaGame::handleDayPhase() {
    voteElimination();
    std::cout << "Μέρα: Οι παίκτες συζητούν και ψηφίζουν!\n";
    currentPhase = NIGHT;
}

void MafiaGame::voteElimination() {
    int eliminatedIndex = getRandomAlivePlayer();
    players[eliminatedIndex].alive = false;
    std::cout << "Οι παίκτες αποφάσισαν να εξολοθρεύσουν τον " << players[eliminatedIndex].name << "!\n";
}

int MafiaGame::getRandomAlivePlayer() {
    std::vector<int> alivePlayers;
    for (size_t i = 0; i < players.size(); ++i) {
        if (players[i].alive) {
            alivePlayers.push_back(i);
        }
    }
    return alivePlayers[rand() % alivePlayers.size()];
}

int main() {
    // Ρύθμιση UTF-8 στην κονσόλα
    SetConsoleOutputCP(CP_UTF8);

    std::cout << "Καλώς ήρθατε στο Mafia Game!\n";
    std::cout << "Το παιχνίδι ξεκινά!\n";

    // Περιμένει να πατήσει Enter ο χρήστης
    system("pause");

    return 0;
}
