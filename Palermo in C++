#include <iostream>
#include <vector>
#include <map>
#include <random>
#include <ctime>
#include <windows.h>
#include <algorithm>

struct Player {
    std::string name;
    std::string role;
    bool alive = true;
};

// Παγκόσμιες μεταβλητές
std::vector<Player> players;
std::map<std::string, int> roleCount;
int totalPlayers;

// Συναρτήσεις παιχνιδιού
void setupGame();
void assignRoles();
void nightPhase();
void dayPhase();
void voteElimination();
int getRandomAlivePlayer();
void checkWinCondition();

int main() {
    SetConsoleOutputCP(CP_UTF8);
    std::cout << "Καλώς ήρθατε στο Mafia Game!\n";
    
    // Επιλογή αριθμού παικτών
    std::cout << "Πόσοι παίκτες θα παίξουν (τουλάχιστον 5)?: ";
    std::cin >> totalPlayers;
    while (totalPlayers < 5) {
        std::cout << "Πρέπει να είναι τουλάχιστον 5! Δοκιμάστε ξανά: ";
        std::cin >> totalPlayers;
    }
    
    setupGame();
    assignRoles();
    
    while (true) {
        nightPhase();
        checkWinCondition();
        dayPhase();
        checkWinCondition();
    }
    
    return 0;
}

// Δημιουργία παικτών
void setupGame() {
    players.clear();
    roleCount = { {"Δολοφόνος", 1}, {"Αστυνομικός", 1}, {"Πολίτης", totalPlayers - 2} };

    std::cin.ignore(); // Καθαρίζει το buffer
    for (int i = 0; i < totalPlayers; ++i) {
        std::string playerName;
        std::cout << "Δώσε όνομα για τον Παίκτη " << i + 1 << ": ";
        std::getline(std::cin, playerName);
        players.push_back({playerName, "", true});
    }
}

// Ανάθεση ρόλων
void assignRoles() {
    std::vector<std::string> availableRoles;
    for (const auto &pair : roleCount) {
        for (int i = 0; i < pair.second; ++i) {
            availableRoles.push_back(pair.first);
        }
    }
    std::shuffle(availableRoles.begin(), availableRoles.end(), std::default_random_engine(time(nullptr)));

    for (size_t i = 0; i < players.size(); ++i) {
        players[i].role = availableRoles[i];
    }

    std::cout << "\nΟι ρόλοι έχουν ανατεθεί! (Μυστικοί 😉)\n";
}

// Νυχτερινή φάση: Ο δολοφόνος επιτίθεται
void nightPhase() {
    std::cout << "\n🌙 ΝΥΧΤΑ: Ο δολοφόνος αποφασίζει ποιον θα σκοτώσει...\n";
    
    int victimIndex = getRandomAlivePlayer();
    players[victimIndex].alive = false;

    std::cout << "❌ " << players[victimIndex].name << " σκοτώθηκε!\n";
}

// Ημερήσια φάση: Οι παίκτες ψηφίζουν
void dayPhase() {
    std::cout << "\n🌞 ΜΕΡΑ: Οι παίκτες συζητούν και ψηφίζουν για αποβολή!\n";
    voteElimination();
}

// Ψήφος αποβολής (Διαδραστικό)
void voteElimination() {
    std::string voteName;
    std::cout << "🔺 Ποιον θέλετε να αποβάλετε; (γράψτε όνομα): ";
    std::cin.ignore();
    std::getline(std::cin, voteName);

    bool found = false;
    for (auto &player : players) {
        if (player.name == voteName && player.alive) {
            player.alive = false;
            std::cout << "🗳️ " << player.name << " αποβλήθηκε!\n";
            found = true;
            break;
        }
    }

    if (!found) {
        std::cout << "❌ Λάθος όνομα! Κανείς δεν αποβλήθηκε...\n";
    }
}

// Επιλογή τυχαίου ζωντανού παίκτη
int getRandomAlivePlayer() {
    std::vector<int> alivePlayers;
    for (size_t i = 0; i < players.size(); ++i) {
        if (players[i].alive) {
            alivePlayers.push_back(i);
        }
    }
    return alivePlayers[rand() % alivePlayers.size()];
}

// Έλεγχος αν κάποιος κέρδισε
void checkWinCondition() {
    int mafiaCount = 0, citizenCount = 0;
    for (const auto &player : players) {
        if (player.alive) {
            if (player.role == "Δολοφόνος") mafiaCount++;
            else citizenCount++;
        }
    }

    if (mafiaCount == 0) {
        std::cout << "\n🎉 Οι πολίτες κέρδισαν! 🎉\n";
        exit(0);
    } else if (mafiaCount >= citizenCount) {
        std::cout << "\n😈 Οι δολοφόνοι κέρδισαν! 😈\n";
        exit(0);
    }
}
